[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro PARK_HEAD]
gcode = 
	{% set X = params.X|default(320)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set Z = params.Z|default(10)|float %}
	{% set E = params.E|default(-75)|float %}
	G91
	G1 E-5.0 F3000
	G1 Z{Z} F700
	G90
	G1 X280 Y{Y} F18000
	M400
	G1 X{X} F18000

[gcode_macro BED_SCREWS_ADJUST]
rename_existing = BED_SCREWS_ADJUST_BASE
gcode = 
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(90)|float %}
	{% set T = params.T|default(235)|float %}
	status_probing
	G28
	Z_TILT_ADJUST
	BED_SCREWS_ADJUST_BASE

[gcode_macro EACCEL_GCODE]
gcode = 
	G1 E10 F50
	G1 E20 F500
	G1 E30 F1000
	G1 E40 F1500
	G1 E50 F2000
	G1 E60 F2500
	G1 E70 F3000
	G1 E675 F3250
	G1 E685 F2500
	G1 E695 F2000
	G1 E705 F1500
	G1 E715 F1000
	G1 E725 F500
	G1 E750 F500
	G1 E800 F70

[gcode_macro UNLOAD_EXTRUDER_SWITCH]
gcode = 
	
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(35)|float %}
	{% set T = params.T|default(250)|float %}
	G92 E0
	G1 E-100 F1200
	G1 E-880 F3500
	M400
	M104 S0

[gcode_macro M140]
rename_existing = M140.1
gcode = 
	{% set S = params.S|int %}
	{% set bed_max = printer.configfile.config.heater_bed.max_temp|int %}
	{% set bed_limiter = bed_max-5|int %}
	{% if S >= bed_limiter %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_limiter}
	{% else %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	{% endif %}

[gcode_macro DUMPX]
gcode = 
	DUMP_TMC STEPPER=stepper_x

[gcode_macro DUMPY]
gcode = 
	DUMP_TMC STEPPER=stepper_y

[gcode_macro DUMPZ]
gcode = 
	DUMP_TMC STEPPER=stepper_z

[gcode_macro DUMPE0]
gcode = 
	DUMP_TMC STEPPER=extruder

[gcode_macro DUMPE1]
gcode = 
	DUMP_TMC STEPPER=extruder1

[gcode_macro SEARCH_VARS]
gcode = 
	{% set search = params.S|lower %}
	{% set ns = namespace() %}
	{% for item in printer  %}
	{% if ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if search in ns.path|lower %}
	{ action_respond_info(ns.path|join) }
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	
	{% if ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{ loop(child.items()) }
	{% else %}
	{% if search in ns.path|lower %}
	{ action_respond_info("%s : %s" % (ns.path|join, child)) }
	{% endif %}
	{% endif %}
	
	{% endfor %}
	{% endif %}
	{% endfor %}

[gcode_macro BABYZ]
gcode = 
	{% set S = params.S|default(2)|float %}
	SET_GCODE_OFFSET MOVE=1 Z={S}

[gcode_macro prntstats]
gcode = 
	Status
	{% if printer.webhooks.state != 'Printing' %}
	
	SET_LED LED=temp_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	
	{% else %}
	
	SET_LED LED=temp_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	
	{% endif %}

[gcode_macro DUMP_VARS]
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
	{ action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
	{% endif %}
	{% endfor %}
	{% endfor %}

[gcode_macro case_lights]
variable_state = 1
gcode = 
	{% if printer["gcode_macro case_lights"].state == 1 %}
	SET_PIN PIN=case_light VALUE=0
	SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=0
	{% else %}
	SET_PIN PIN=case_light VALUE=1
	SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=1
	{% endif %}

[led_effect set_progress_leds]
leds = 
	neopixel:progress_leds
autostart = true
frame_rate = 24
layers = 
	static 0 0 top (1.0, 1.0, 1.0)

[led_effect set_nozzle_leds]
leds = 
	neopixel:heater_leds
autostart = true
frame_rate = 24
layers = 
	static 0 0 top (1.0, 1.0, 1.0)

[led_effect progress_bar]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	progress  -2  0 subtract    ( 0, 0, 0),( 1, 0, 1)
	static     0  0 top    ( 1, 1, 1)

[led_effect print_end]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	breathing 8 0 top (0, 1, 0)

[led_effect print_pause]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	comet 1 5 top (0, 0.1, 1)

[led_effect print_cancel]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	breathing 8 0 top (1, 0, 0)

[led_effect nozzle_heating_front_leds]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
heater = extruder
layers = 
	heater 35 0 add (0,0,0),(1,1,1)
	breathing 3 0 top (1, 0.18, 0.0)

[led_effect probing]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
endstops = probe
layers = 
	homing	8	0	add	(0, 1, 0)
	static	0	0	top	(0, 0, 0)

[led_effect atc_leds]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
layers = 
	linearfade 3 0 top (0.0, 1.0, 1.0),(0.0,0.0,1.0)

[gcode_macro status_printing]
gcode = 
	SET_LED_EFFECT EFFECT=progress_bar REPLACE=1 FADETIME=1.5

[gcode_macro status_heating_front_leds]
gcode = 
	SET_LED_EFFECT EFFECT=nozzle_heating_front_leds REPLACE=1 FADETIME=1.5

[gcode_macro progress_bar_idle]
gcode = 
	SET_LED_EFFECT EFFECT=set_progress_leds REPLACE=1 FADETIME=1.5

[gcode_macro print_success]
gcode = 
	SET_LED_EFFECT EFFECT=print_end REPLACE=1 FADETIME=1.5

[gcode_macro status_pause]
gcode = 
	SET_LED_EFFECT EFFECT=print_pause REPLACE=1 FADETIME=1.5

[gcode_macro status_cancel]
gcode = 
	SET_LED_EFFECT EFFECT=print_cancel REPLACE=1 FADETIME=1.5

[gcode_macro status_atc]
gcode = 
	SET_LED_EFFECT EFFECT=atc_leds REPLACE=1 FADETIME=1.5

[delayed_gcode report_temp]
initial_duration = 5
gcode = 
	update_leds
	UPDATE_DELAYED_GCODE ID=report_temp DURATION=5

