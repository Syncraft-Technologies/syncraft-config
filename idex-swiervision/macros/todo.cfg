[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1) | int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro PARK_HEAD]
gcode = 
	{% set X = params.X|default(320)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set Z = params.Z|default(10)|float %}
	{% set E = params.E|default(-75)|float %}
	G91
	G1 E-5.0 F3000
	G1 Z{Z} F700
	G90
	G1 X280 Y{Y} F18000
	M400
	G1 X{X} F18000

[gcode_macro BED_SCREWS_ADJUST]
rename_existing = BED_SCREWS_ADJUST_BASE
gcode = 
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(90)|float %}
	{% set T = params.T|default(235)|float %}
	_setLedStatusProbing
	G28
	Z_TILT_ADJUST
	BED_SCREWS_ADJUST_BASE

[gcode_macro EACCEL_GCODE]
gcode = 
	G1 E10 F50
	G1 E20 F500
	G1 E30 F1000
	G1 E40 F1500
	G1 E50 F2000
	G1 E60 F2500
	G1 E70 F3000
	G1 E675 F3250
	G1 E685 F2500
	G1 E695 F2000
	G1 E705 F1500
	G1 E715 F1000
	G1 E725 F500
	G1 E750 F500
	G1 E800 F70

[gcode_macro UNLOAD_EXTRUDER_SWITCH]
gcode = 
	
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(35)|float %}
	{% set T = params.T|default(250)|float %}
	G92 E0
	G1 E-100 F1200
	G1 E-880 F3500
	M400
	M104 S0

[gcode_macro M140]
rename_existing = M140.1
gcode = 
	{% set S = params.S|int %}
	{% set bed_max = printer.configfile.config.heater_bed.max_temp|int %}
	{% set bed_limiter = bed_max-5|int %}
	{% if S >= bed_limiter %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_limiter}
	{% else %}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	{% endif %}

[gcode_macro DUMPX]
gcode = 
	DUMP_TMC STEPPER=stepper_x

[gcode_macro DUMPY]
gcode = 
	DUMP_TMC STEPPER=stepper_y

[gcode_macro DUMPZ]
gcode = 
	DUMP_TMC STEPPER=stepper_z

[gcode_macro DUMPE0]
gcode = 
	DUMP_TMC STEPPER=extruder

[gcode_macro DUMPE1]
gcode = 
	DUMP_TMC STEPPER=extruder1

[gcode_macro SEARCH_VARS]
gcode = 
	{% set search = params.S|lower %}
	{% set ns = namespace() %}
	{% for item in printer  %}
	{% if ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if search in ns.path|lower %}
	{ action_respond_info(ns.path|join) }
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	
	{% if ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{ loop(child.items()) }
	{% else %}
	{% if search in ns.path|lower %}
	{ action_respond_info("%s : %s" % (ns.path|join, child)) }
	{% endif %}
	{% endif %}
	
	{% endfor %}
	{% endif %}
	{% endfor %}

[gcode_macro BABYZ]
gcode = 
	{% set S = params.S|default(2)|float %}
	SET_GCODE_OFFSET MOVE=1 Z={S}

[gcode_macro prntstats]
gcode = 
	Status
	{% if printer.webhooks.state != 'Printing' %}
	
	SET_LED LED=temp_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	
	{% else %}
	
	SET_LED LED=temp_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	
	{% endif %}

[gcode_macro DUMP_VARS]
gcode = 
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
	{ action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
	{% else %}
	{ action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
	{% endif %}
	{% endfor %}
	{% endfor %}

[gcode_macro case_lights]
variable_state = 1
gcode = 
	{% if printer["gcode_macro case_lights"].state == 1 %}
	SET_PIN PIN=case_light VALUE=0
	SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=0
	{% else %}
	SET_PIN PIN=case_light VALUE=1
	SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=1
	{% endif %}

[led_effect set_progress_leds]
leds = 
	neopixel:progress_leds
autostart = true
frame_rate = 24
layers = 
	static 0 0 top (1.0, 1.0, 1.0)

[led_effect set_nozzle_leds]
leds = 
	neopixel:heater_leds
autostart = true
frame_rate = 24
layers = 
	static 0 0 top (1.0, 1.0, 1.0)

[led_effect progress_bar]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	progress  -2  0 subtract    ( 0, 0, 0),( 1, 0, 1)
	static     0  0 top    ( 1, 1, 1)

[led_effect print_end]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	breathing 8 0 top (0, 1, 0)

[led_effect print_pause]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	comet 1 5 top (0, 0.1, 1)

[led_effect print_cancel]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
layers = 
	breathing 8 0 top (1, 0, 0)

[led_effect nozzle_heating_front_leds]
leds = 
	neopixel:progress_leds
autostart = false
frame_rate = 24
heater = extruder
layers = 
	heater 35 0 add (0,0,0),(1,1,1)
	breathing 3 0 top (1, 0.18, 0.0)

[led_effect probing]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
endstops = probe
layers = 
	homing	8	0	add	(0, 1, 0)
	static	0	0	top	(0, 0, 0)

[led_effect atc_leds]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
layers = 
	linearfade 3 0 top (0.0, 1.0, 1.0),(0.0,0.0,1.0)



[delayed_gcode report_temp]
initial_duration = 5
gcode = 
	update_leds
	UPDATE_DELAYED_GCODE ID=report_temp DURATION=5

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos = False 	; use custom park coordinates for x,y [True/False]
variable_custom_park_x = 0.0   	; custom x position; value must be within your defined min and max of X
variable_custom_park_y = 0.0   	; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz = 15.0   	; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract = 0.0   	; the value to retract while PAUSE
variable_cancel_retract = 0.0   	; the value to retract while CANCEL_PRINT
variable_speed_retract = 35.0  	; retract speed in mm/s
variable_unretract = 0.0   	; the value to unretract while RESUME
variable_speed_unretract = 35.0  	; unretract speed in mm/s
variable_speed_hop = 15.0  	; z move speed in mm/s
variable_speed_move = 300.0 	; move speed in mm/s
variable_park_at_cancel = False 	; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
gcode = 



[gcode_macro CANCEL_PRINT_CLOGGED]
gcode = 
	{% set dcvars = printer["gcode_macro DC_VARS"] %}
	_setLedStatusCancel
	{% if printer["gcode_macro _primeRoutine"].primed == 1 %}
	G92 E0
	G1 E-80 F3200
	M400
	{% endif %}
	CANCEL_PRINT_BASE
	G28 Z
	TURN_OFF_HEATERS
	M106 S0
	M204 S7000
	M84
	
	SET_FAN_SPEED FAN=air_flow_fan SPEED=0.0
	SET_GCODE_VARIABLE MACRO=AFC_VARS VARIABLE=afc VALUE=0
	SET_GCODE_VARIABLE MACRO=AFC_VARS VARIABLE=was_enabled VALUE=0
	SET_GCODE_VARIABLE MACRO=AFC_VARS VARIABLE=isprinting VALUE=0
	SET_GCODE_VARIABLE MACRO=_primeRoutine VARIABLE=primed VALUE=0
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_active VALUE=0
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_primed VALUE=0
	SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=0
	SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_primed VALUE=0
	SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=extruder1_in_use VALUE=0

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set dcvars = printer["gcode_macro DC_VARS"] %}
	{% set temp = printer.extruder.target|float if printer.dual_carriage.carriage_0 == 'PRIMARY' else printer.extruder1.target|float %}
	{% set XPOS = printer.configfile.settings.stepper_x.position_endstop|float + 0.2 %}
	{% set X1POS = printer.configfile.settings.dual_carriage.position_max|float - 0.2 %}
	SET_GCODE_VARIABLE MACRO=AFC_VARS VARIABLE=target_temp VALUE={temp}
	SAVE_DUAL_CARRIAGE_STATE NAME=dual_carriage
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE_BASE
	_setLedStatusPause
	{% if dcvars.print_mode == 0 %}
	_idexParkTool
	{% else %}
	SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
	G1 X{X1POS} F{dcvars.feedrate}
	M400
	SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
	G1 X{XPOS} F{dcvars.feedrate}
	M400
	{% endif %}
	M204 S2000
	G1 Y300 F24000
	G92 E0
	G1 E-20 F3000
	{% if printer["gcode_macro M0"].pause_at_height == 1 %}
	M104 S0
	{% endif %}

[gcode_macro M0]
variable_pause_at_height = 0
gcode = 
	SET_GCODE_VARIABLE MACRO=M0 VARIABLE=pause_at_height VALUE=1
	M400
	PAUSE

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set dcvars = printer["gcode_macro DC_VARS"] %}
	{% set afcvars = printer["gcode_macro AFC_VARS"] %}
	M104 T{dcvars.active_carriage} S{afcvars.target_temp}
	{% if dcvars.print_mode != 0 %}
	_idexSyncExtrudersTemp
	{% endif %}
	M109 T{dcvars.active_carriage} S{afcvars.target_temp}
	{% if printer['gcode_macro AFC_VARS'].afc == 1 %}
	{action_respond_info("afc == 1, entered!")}
	M109 T{dcvars.active_carriage} S{afcvars.target_temp}
	G92 E0
	G1 E780 F3250
	G1 E820 F500
	G1 E900 F70
	G92 E0
	G1 E-20 F3000
	{% if dcvars.active_carriage == 0 %}
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_primed VALUE=1
	{% else %}
	SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_primed VALUE=1
	{% endif %}
	SET_GCODE_VARIABLE MACRO=AFC_VARS VARIABLE=afc VALUE=0
	RESTORE_GCODE_STATE NAME=runout_state MOVE=1
	RESTORE_DUAL_CARRIAGE_STATE NAME=dual_carriage MOVE=1
	{% elif printer["gcode_macro M0"].pause_at_height == 1 %}
	SET_GCODE_VARIABLE MACRO=M0 VARIABLE=pause_at_height VALUE=0
	{% if dcvars.print_mode == 1 %}
	RESTORE_GCODE_STATE NAME=M600_state MOVE=1
	RESTORE_DUAL_CARRIAGE_STATE NAME=dual_carriage MOVE=1
	SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
	SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
	{% elif dcvars.print_mode == 2 %}
	RESTORE_GCODE_STATE NAME=M600_state MOVE=1
	RESTORE_DUAL_CARRIAGE_STATE NAME=dual_carriage MOVE=1
	SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
	SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
	{% endif %}
	{% else %}
	RESTORE_GCODE_STATE NAME=M600_state MOVE=1
	RESTORE_DUAL_CARRIAGE_STATE NAME=dual_carriage MOVE=1
	{% endif %}
	_setLedStatusPrinting
	RESUME_BASE VELOCITY=300

[homing_override]
axes: xyz
gcode:
	{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
	{% if home_all %}
		# SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
		# SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=1
		# SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
		# SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
		# G4 P300
    	G28 Z
		G28 X
		G28 Y
		# _HOME_X
		# _HOME_Y
	{% endif %}

	#{% if home_all or 'X' in params %}
	{% if 'X' in params %}
		# SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
		# G4 P300
    	G28 X
  	{% endif %}
	
	#{% if home_all or 'Y' in params %}
  	{% if 'Y' in params %}
		# SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
		# G4 P300
		G28 Y
    	# _HOME_Y
  	{% endif %}

	#{% if home_all or 'Z' in params %}
  	{% if 'Z' in params %}
		# SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
		# G4 P300
    	G28 Z
    	#G1 Z10
  	{% endif %}
	{% if printer.toolhead.extruder == 'extruder' %}
		SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
	{% else %}
		SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
	{% endif %}

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.5 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    #G91
    #G1 X1 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P2000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.55 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    #G91
    #G1 Y1 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[idle_timeout]
timeout = 3600
gcode = 
	{% set svv = printer.save_variables.variables %}
	{% if printer.pause_resume.is_paused %}
	M118 Bypassed Timeout
	M117 Bypassed Timeout
	{% else %}
	M118 Timeout Reached
	M117 Timeout Reached
	TURN_OFF_HEATERS
	M84
	{% endif %}




[gcode_macro PURGE_NOZZLE]
gcode = 
	{% set X = params.X|default(280)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set E = params.E|default(100)|float %}
	G1 E15 F100
	G92 E0
	G1 E-20 F3000

[gcode_macro PROBE_CALIBRATE]
rename_existing = PROBE_CALIBRATE_BASE
gcode = 
	{action_respond_info("entrou")}
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(90)|float %}
	{% set T = params.T|default(235)|float %}
	_setLedStatusProbing
	G28
	Z_TILT_ADJUST
	G1 Z{Z} F6000
	G1 X{X} Y{Y} F18000
	PROBE_CALIBRATE_BASE
	{action_respond_info(Z|string)}

[gcode_macro EXTRUDER_SCREW_PLACEMENT]
gcode = 
	{action_respond_info("entrou no EXTRUDER_SCREW_PLACEMENT")}
	G28
	T1
	G90
	G1 Y150 X50 F24000
	RESPOND_FINISH_MACRO M="EXTRUDER_SCREW_PLACEMENT"

[gcode_macro PROBE_CALIBRATE_AUTOMATIC]
gcode = 
	{action_respond_info("entrou no PROBE_CALIBRATE_AUTOMATIC")}
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set O = params.O|default(0.0)|float %}
	_setLedStatusProbing
	G28
	ACTIVATE_EXTRUDER EXTRUDER=extruder
	SET_DUAL_CARRIAGE CARRIAGE=0
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	SAVE_VARIABLE VARIABLE=active_carriage VALUE=0
	Z_TILT_ADJUST
	Z_TILT_ADJUST
	G1 X{X} Y{Y} F24000
	G1 Z5 F1000
	PROBE
	G1 Z5 F1000
	_idexParkTool
	ACTIVATE_EXTRUDER EXTRUDER=extruder1
	SET_DUAL_CARRIAGE CARRIAGE=1
	SAVE_VARIABLE VARIABLE=active_carriage VALUE=1
	G1 X{X} Y{Y} F24000
	G1 Z0 F800  # offset
	RESPOND_FINISH_MACRO M="PROBE_CALIBRATE_AUTOMATIC"

[gcode_macro CALIBRATE_Z_ENDSTOP]
gcode = 
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	G28
	Z_TILT_ADJUST
	G1 Z{Z} F6000
	G1 X{X} Y{Y} F18000
	Z_ENDSTOP_CALIBRATE

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing = SET_HEATER_TEMPERATURE_BASE
gcode = 
	{% set TARGET = params.TARGET|default(off)|int %}
	{% set HEATER = params.HEATER|default('none')|string %}
	{% set nozzle_max = printer.configfile.config.extruder.max_temp|int %}
	{% set nozzle_limiter = nozzle_max-10|int %}
	{% if printer.extruder.target != 0 or printer.extruder1.target != 0 %}
	{% if TARGET >= nozzle_limiter %}
	SET_HEATER_TEMPERATURE_BASE HEATER={HEATER} TARGET={nozzle_limiter}
	{% else %}
	SET_HEATER_TEMPERATURE_BASE HEATER={HEATER} TARGET={TARGET}
	{% endif %}
	{% if HEATER == 'extruder' %}
	status_heating_left
	{% elif HEATER == 'extruder1' %}
	status_heating_right
	{% endif %}
	{% else %}
	SET_HEATER_TEMPERATURE_BASE HEATER={HEATER} TARGET={TARGET}
	status_cooling_left
	status_cooling_right
	progress_bar_idle
	{% endif %}



[gcode_macro DUMPX2]
gcode = 
	DUMP_TMC STEPPER=dual_carriage

[gcode_macro M900]
gcode = 
	{% set svv = printer.save_variables.variables %}
	{% set S = params.S|default(0)|float %}
	{% set P = params.P|default(0)|float %}
	{% if P == 0.8 and S >= 100 %}
	SET_PRESSURE_ADVANCE ADVANCE=0.1 EXTRUDER={printer.toolhead.extruder}   #{svv.currentextruder}
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE=0.1 EXTRUDER={printer.toolhead.extruder}
	{% endif %}

[led_effect set_nozzle_leds2]
leds = 
	neopixel:heater_leds2
autostart = true
frame_rate = 24
layers = 
	static 0 0 top (1.0, 1.0, 1.0)

[led_effect left_tool_idle]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
layers = 
	breathing 10 0 subtract (0.3, 0.3, 0.65)
	static 0 0 top (0.3 , 0.75, 1)

[led_effect left_tool_heating]
leds = 
	neopixel:heater_leds
autostart = true
frame_rate = 24
heater = extruder
layers = 
	heater 35 0 add (0,0,0),(1,1,1)
	breathing 3 0 top (1, 0.18, 0.0)

[led_effect left_tool_printing]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
layers = 
	static 0 0 top (1, 1, 1)

[led_effect left_tool_cooling]
leds = 
	neopixel:heater_leds
autostart = false
frame_rate = 24
heater = extruder
layers = 
	heater 50 0 add (0,0,0),(1,1,1)
	breathing 15 0 top (1, 0.3, 0.0)

[led_effect right_tool_idle]
leds = 
	neopixel:heater_leds2
autostart = false
frame_rate = 24
layers = 
	breathing 10 0 subtract (0.3, 0.3, 0.65)
	static 0 0 top (0.3 , 0.75, 1)

[led_effect right_tool_heating]
leds = 
	neopixel:heater_leds2
autostart = true
frame_rate = 24
heater = extruder1
layers = 
	heater 35 0 add (0,0,0),(1,1,1)
	breathing 3 0 top (1, 0.18, 0.0)

[led_effect right_tool_printing]
leds = 
	neopixel:heater_leds2
autostart = false
frame_rate = 24
layers = 
	static 0 0 top (1, 1, 1)

[led_effect right_tool_cooling]
leds = 
	neopixel:heater_leds2
autostart = false
frame_rate = 24
heater = extruder1
layers = 
	heater 50 0 add (0,0,0),(1,1,1)
	breathing 15 0 top (1, 0.3, 0.0)

[gcode_macro set_temperature_layer]
gcode = 
	{% set L0 = params.L0|default(0)|float %}
	{% set L1 = params.L1|default(0)|float %}
	{% set svv = printer.save_variables.variables %}
	
	{% if printer.dual_carriage.carriage_0 == 'PRIMARY' %}
	{action_respond_info(L0|string)}
	M109 T0 S{L0}
	{% else %}
	{action_respond_info(L1|string)}
	M109 T1 S{L1}
	{% endif %}

[gcode_macro RESPOND_FINISH_MACRO]
gcode = 
	{% set macro_name = params.M|default("NONE") %}
	{action_respond_info("finalizou o " + macro_name)}

[gcode_macro ACTION_RESPOND_INFO]
gcode = 
	{% set message = params.M|default("None") %}
	{action_respond_info(message)}

[gcode_macro SILENT_MODE]
gcode:
	{% set state = params.S|default(0)|int %}
	{% if state == 1 %}
		SET_VELOCITY_LIMIT VELOCITY=200
		SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS VALUE=35
		SET_TMC_FIELD STEPPER=dual_carriage FIELD=TPWMTHRS VALUE=35
		SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS VALUE=35
		{action_respond_info("Silent Mode On")}
	{% else %}
		SET_VELOCITY_LIMIT VELOCITY=500
		SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS VALUE=1048575
		SET_TMC_FIELD STEPPER=dual_carriage FIELD=TPWMTHRS VALUE=1048575
		SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS VALUE=1048575
		{action_respond_info("Silent Mode Off")}
	{% endif %}